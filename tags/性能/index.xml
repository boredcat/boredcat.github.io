<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>性能 on EvanZhao</title>
    <link>https://www.helloevanzhao.me/tags/%E6%80%A7%E8%83%BD/</link>
    <description>Recent content in 性能 on EvanZhao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.helloevanzhao.me/tags/%E6%80%A7%E8%83%BD/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 8 Iterable.forEach() vs foreach loop</title>
      <link>https://www.helloevanzhao.me/post/2019-07-31-java-8-foreach-vs-foreach-loop/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.helloevanzhao.me/post/2019-07-31-java-8-foreach-vs-foreach-loop/</guid>
      <description>Java 8 Iterable.forEach() vs foreach loop Which of the following is better practice in Java 8? Java 8: joins.forEach(join -&amp;gt; mIrc.join(mSession, join)); Java 7: for (String join : joins) { mIrc.join(mSession, join); } I have lots of for loops that could be &amp;ldquo;simplified&amp;rdquo; with lambdas, but is there really any advantage of using them? Would it improve their performance and readability? EDIT I&amp;rsquo;ll also extend this question to longer methods.</description>
    </item>
    
  </channel>
</rss>